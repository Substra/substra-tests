name: End to end tests

on:
  schedule:
    - cron: "0 0 * * 2-6" # every Tuesday to Saturday at midnight
  workflow_dispatch:
    inputs:
      connectTests:
        description: "Git branch or commit to use for connect-tests"
        required: true
        default: "master"
      connectHlfK8s:
        description: "Git branch or commit to use for connect-hlf-k8s"
        required: true
        default: "master"
      orchestrator:
        description: "Git branch or commit to use for orchestrator"
        required: true
        default: "main"
      connectBackend:
        description: "Git branch or commit to use for connect-backend"
        required: true
        default: "master"
      connectFrontend:
        description: "Git branch or commit to use for connect-frontend"
        required: true
        default: "master"
      connectTools:
        description: "Git branch or commit to use for connect-tools"
        required: true
        default: "main"
      connectlib:
        description: "Git branch or commit to use for connectlib"
        required: true
        default: "main"
      substra:
        description: "Git branch or commit to use for substra sdk"
        required: true
        default: "main"

env:
  GCP_PROJECT: "connect-314908"
  GCP_SERVICE_ACCOUNT: "e2e-tests@connect-314908.iam.gserviceaccount.com"
  GCP_SERVICE_ACCOUNT_KEY: "ci/keys/connect-314908-3902714646d9.json.gpg"
  GCP_SSH_SECRET: "projects/101637030044/secrets/connect-e2e-deploy-key/versions/2"
  DEFAULT_CONNECT_TESTS: "master"
  DEFAULT_CONNECT_SDK: "master"
  DEFAULT_CONNECT_BACKEND: "master"
  DEFAULT_CONNECT_FRONTEND: "master"
  DEFAULT_CONNECT_TOOLS: "master"
  DEFAULT_CONNECTLIB: "main"
  DEFAULT_HLF_K8S: "master"
  DEFAULT_ORCHESTRATOR: "master"

jobs:
  test-distributed:
    if: github.repository == 'owkin/connect-tests' # Prevent the test from running on forks
    name: Tests Distributed
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        name: Set up python
        with:
          python-version: 3.7
      - name: Install python requirements
        run: pip install -r ci/requirements.txt
      - uses: azure/setup-helm@v1
        with:
          version: "v3.2.3"
      - uses: azure/setup-kubectl@v1
        with:
          version: "latest"
      - name: Install Skaffold
        run: |
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/v1.34.0/skaffold-linux-amd64
          chmod +x ./skaffold
          sudo mv ./skaffold /usr/local/bin/skaffold
          skaffold version
      - name: Install tools
        run: pip install pyyaml
      - name: Open GCP key
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: gpg --quiet --batch --yes --decrypt --passphrase="$GPG_PASSPHRASE" --output ci/keys/gcp_sa_key.json "${GCP_SERVICE_ACCOUNT_KEY}"
      - name: Set variables
        run: |
          echo "CONNECT_TESTS=${{ github.event.inputs.connectTests || env.DEFAULT_CONNECT_TESTS }}" >> $GITHUB_ENV
          echo "CONNECT_SDK=${{ github.event.inputs.substra || env.DEFAULT_CONNECT_SDK }}" >> $GITHUB_ENV
          echo "CONNECT_BACKEND=${{ github.event.inputs.connectBackend || env.DEFAULT_CONNECT_BACKEND }}" >> $GITHUB_ENV
          echo "CONNECT_FRONTEND=${{ github.event.inputs.connectFrontend || env.DEFAULT_CONNECT_FRONTEND }}" >> $GITHUB_ENV
          echo "HLF_K8S=${{ github.event.inputs.connectHlfK8s || env.DEFAULT_HLF_K8S }}" >> $GITHUB_ENV
          echo "ORCHESTRATOR=${{ github.event.inputs.orchestrator || env.DEFAULT_ORCHESTRATOR }}" >> $GITHUB_ENV
      - name: Workflow inputs
        run: |
          echo "connect-tests ${{ env.CONNECT_TESTS }}"
          echo "substra ${{ env.CONNECT_SDK }}"
          echo "connect-backend ${{ env.CONNECT_BACKEND }}"
          echo "connect-frontend ${{ env.CONNECT_FRONTEND }}"
          echo "hlf-k8s ${{ env.HFL_K8S }}"
          echo "orchestrator ${{ env.ORCHESTRATOR }}"
      - name: Test
        run: |
          CLUSTER_NAME="connect-tests-$(date -u +'%Y-%m-%d-%Hh%M')"
          cd ci/
          start=`date +%s`
          python -u ./run-ci.py \
            --gcp-keys-directory=./keys/ --gcp-key-filename=gcp_sa_key.json \
            --cluster-name=${CLUSTER_NAME} \
            --git-use-token --git-clone-method=https \
            --connect-tests ${{ env.CONNECT_TESTS }} \
            --substra ${{ env.CONNECT_SDK }} \
            --backend ${{ env.CONNECT_BACKEND }} \
            --hlf-k8s ${{ env.HLF_K8S }} \
            --orchestrator ${{ env.ORCHESTRATOR }} \
            --frontend ${{ env.CONNECT_FRONTEND }} \
            --orchestrator-mode distributed \
            --write-summary-to-file ./.slack_message
            # frontend tests disabled in distributed mode for now
          end=`date +%s`
          echo "E2E_TESTS_DURATION_SECONDS=$((end-start))" >> $GITHUB_ENV
        env:
          GIT_TOKEN: ${{ secrets.OWLFRED_PAT }}
      - if: always() && github.event_name == 'schedule'
        name: Send Slack report
        run: |
          ci/send-slack-report.py '${{ secrets.SLACK_WEBHOOK }}' ci/.slack_message \
          --title 'Distributed e2e tests' \
          --status '${{ job.status }}' \
          --link 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}' \
          --duration-seconds "${E2E_TESTS_DURATION_SECONDS}"
      - name: Upload pod logs
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: logs-and-screenshots-distributed
          path: ci/logs
          retention-days: 5
  test-standalone:
    if: github.repository == 'owkin/connect-tests' # Prevent the test from running on forks
    name: Tests Standalone
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        name: Set up python
        with:
          python-version: 3.7
      - name: Install python requirements
        run: pip install -r ci/requirements.txt
      - uses: azure/setup-helm@v1
        with:
          version: "v3.2.3"
      - uses: azure/setup-kubectl@v1
        with:
          version: "latest"
      - name: Install Skaffold
        run: |
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/v1.33.0/skaffold-linux-amd64
          chmod +x ./skaffold
          sudo mv ./skaffold /usr/local/bin/skaffold
          skaffold version
      - name: Install tools
        run: pip install pyyaml
      - name: Open GCP key
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: gpg --quiet --batch --yes --decrypt --passphrase="$GPG_PASSPHRASE" --output ci/keys/gcp_sa_key.json "${GCP_SERVICE_ACCOUNT_KEY}"
      - name: Set variables
        run: |
          echo "CONNECT_TESTS=${{ github.event.inputs.connectTests || env.DEFAULT_CONNECT_TESTS }}" >> $GITHUB_ENV
          echo "CONNECT_SDK=${{ github.event.inputs.substra || env.DEFAULT_CONNECT_SDK }}" >> $GITHUB_ENV
          echo "CONNECT_BACKEND=${{ github.event.inputs.connectBackend || env.DEFAULT_CONNECT_BACKEND }}" >> $GITHUB_ENV
          echo "CONNECT_FRONTEND=${{ github.event.inputs.connectFrontend || env.DEFAULT_CONNECT_FRONTEND }}" >> $GITHUB_ENV
          echo "CONNECT_TOOLS=${{ github.event.inputs.connectTools || env.DEFAULT_CONNECT_TOOLS }}" >> $GITHUB_ENV
          echo "CONNECTLIB=${{ github.event.inputs.connectlib || env.DEFAULT_CONNECTLIB }}" >> $GITHUB_ENV
          echo "HLF_K8S=${{ github.event.inputs.connectHlfK8s || env.DEFAULT_HLF_K8S }}" >> $GITHUB_ENV
          echo "ORCHESTRATOR=${{ github.event.inputs.orchestrator || env.DEFAULT_ORCHESTRATOR }}" >> $GITHUB_ENV
      - name: Workflow inputs
        run: |
          echo "connect-tests ${{ env.CONNECT_TESTS }}"
          echo "substra ${{ env.CONNECT_SDK }}"
          echo "connect-backend ${{ env.CONNECT_BACKEND }}"
          echo "connect-frontend ${{ env.CONNECT_FRONTEND }}"
          echo "connect-tools ${{ env.CONNECT_TOOLS }}"
          echo "connectlib ${{ env.CONNECTLIB }}"
          echo "hlf-k8s ${{ env.HFL_K8S }}"
          echo "orchestrator ${{ env.ORCHESTRATOR }}"
      - name: Test
        run: |
          CLUSTER_NAME="connect-tests-$(date -u +'%Y-%m-%d-%Hh%M')"
          cd ci/
          start=`date +%s`
          python -u ./run-ci.py \
            --gcp-keys-directory=./keys/ --gcp-key-filename=gcp_sa_key.json \
            --cluster-name=${CLUSTER_NAME} \
            --git-use-token --git-clone-method=https \
            --connect-tests ${{ env.CONNECT_TESTS }} \
            --substra ${{ env.CONNECT_SDK }} \
            --backend ${{ env.CONNECT_BACKEND }} \
            --hlf-k8s ${{ env.HLF_K8S }} \
            --orchestrator ${{ env.ORCHESTRATOR }} \
            --frontend ${{ env.CONNECT_FRONTEND }} \
            --connect-tools ${{ env.CONNECT_TOOLS }} \
            --connectlib ${{ env.CONNECTLIB }} \
            --orchestrator-mode standalone \
            --run-connectlib-tests \
            --run-frontend-tests \
            --write-summary-to-file ./.slack_message
          end=`date +%s`
          echo "E2E_TESTS_DURATION_SECONDS=$((end-start))" >> $GITHUB_ENV
        env:
          GIT_TOKEN: ${{ secrets.OWLFRED_PAT }}
      - if: always() && github.event_name == 'schedule'
        name: Send Slack report
        run: |
          ci/send-slack-report.py '${{ secrets.SLACK_WEBHOOK }}' ci/.slack_message \
          --title 'Standalone e2e tests' \
          --status '${{ job.status }}' \
          --link 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}' \
          --duration-seconds "${E2E_TESTS_DURATION_SECONDS}"
      - name: Upload pod logs
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: logs-and-screenshots-standalone
          path: ci/logs
          retention-days: 5
