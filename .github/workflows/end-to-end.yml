name: End to end tests

on:
  schedule:
    - cron: "12 3 * * 2-6" # every Tuesday to Saturday at 3:12 AM
  workflow_dispatch:
    inputs:
      testsToRun:
        description: "Which tests to run"
        required: true
        default: "sdk"
        type: choice
        options:
        - all
        - connectlib
        - sdk
        - sdkConnectlib
        - sdkFrontend
      refs:
        description: |
          Git ref (branch or tag) to use instead of default for Connect repos, in format REPO=GIT_REF,REPO=GIT_REF.
          Valid repos: tests, backend, frontend, connect_tools, connectlib, sdk, hlf_k8s, orchestrator
        default: ""
      orchestratorMode:
        type: choice
        description: "Orchestrator modes to run tests for"
        required: true
        default: "both"
        options:
          - both
          - standalone
          - distributed
      githubBotContext:
        description: 'This field is only used by GitHub bot'
        required: false
        default: ''

env:
  GCP_PROJECT: "connect-314908"
  GCP_SERVICE_ACCOUNT: "e2e-tests@connect-314908.iam.gserviceaccount.com"
  GCP_SERVICE_ACCOUNT_KEY: "ci/keys/connect-314908-3902714646d9.json.gpg"
  GCP_SSH_SECRET: "projects/101637030044/secrets/connect-e2e-deploy-key/versions/2"
  DEFAULT_RUN_END_TO_END_TESTS: "true"
  DEFAULT_RUN_FRONTEND_TESTS_DISTRIBUTED: "false" # frontend tests disabled in distributed mode for now
  DEFAULT_RUN_FRONTEND_TESTS_STANDALONE: "true"
  DEFAULT_RUN_CONNECTLIB_TESTS_DISTRIBUTED: "false" # connectlib tests disabled in distributed mode for now
  DEFAULT_RUN_CONNECTLIB_TESTS_STANDALONE: "true"

jobs:
  test-distributed:
    # Prevent the test from running on forks
    if: >-
      github.repository == 'owkin/connect-tests' &&
      (
        !github.event.inputs.orchestratorMode ||
        github.event.inputs.orchestratorMode == 'both' ||
        github.event.inputs.orchestratorMode == 'distributed'
      )
    name: Tests Distributed
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        name: Set up python
        with:
          python-version: 3.7
      - name: Install python requirements
        run: pip install -r ci/requirements.txt
      - uses: azure/setup-helm@v1
        with:
          version: "v3.2.3"
      - uses: azure/setup-kubectl@v1
        with:
          version: "latest"
      - name: Install Skaffold
        run: |
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/v1.34.0/skaffold-linux-amd64
          chmod +x ./skaffold
          sudo mv ./skaffold /usr/local/bin/skaffold
          skaffold version
      - name: Install tools
        run: pip install pyyaml
      - name: Open GCP key
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: gpg --quiet --batch --yes --decrypt --passphrase="$GPG_PASSPHRASE" --output ci/keys/gcp_sa_key.json "${GCP_SERVICE_ACCOUNT_KEY}"
      - name: Set variables
        run: |
          echo "RUN_END_TO_END_TESTS=${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.testsToRun == 'all' || github.event.inputs.testsToRun == 'sdk' || github.event.inputs.testsToRun == 'sdkFrontend' || github.event.inputs.testsToRun == 'sdkConnectlib') || github.event_name != 'workflow_dispatch' && env.DEFAULT_RUN_END_TO_END_TESTS }}" >> $GITHUB_ENV
          echo "RUN_FRONTEND_TESTS=${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.testsToRun == 'all' || github.event.inputs.testsToRun == 'sdkFrontend') || github.event_name != 'workflow_dispatch' && env.DEFAULT_RUN_FRONTEND_TESTS_DISTRIBUTED }}" >> $GITHUB_ENV
          echo "RUN_CONNECTLIB_TESTS=${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.testsToRun == 'all' || github.event.inputs.testsToRun == 'sdkConnectlib' || github.event.inputs.testsToRun == 'connectlib') || github.event_name != 'workflow_dispatch' && env.DEFAULT_RUN_CONNECTLIB_TESTS_DISTRIBUTED }}" >> $GITHUB_ENV
      - name: Workflow inputs
        run: |
          echo '${{ github.event.inputs.refs }}'
      - name: Test
        run: |
          CLUSTER_NAME="connect-tests-$(date -u +'%Y-%m-%d-%Hh%M')"
          cd ci/
          start=`date +%s`
          python -u ./run-ci.py \
            --gcp-keys-directory=./keys/ --gcp-key-filename=gcp_sa_key.json \
            --cluster-name=${CLUSTER_NAME} \
            --git-use-token --git-clone-method=https \
            --refs '${{ github.event.inputs.refs }}'
            --orchestrator-mode distributed \
            $(if [ "${{ env.RUN_END_TO_END_TESTS }}" != "true" ]; then echo --tests-make-command=""; fi) \
            $(if [ "${{ env.RUN_FRONTEND_TESTS }}" == "true" ]; then echo "--run-frontend-tests"; fi) \
            $(if [ "${{ env.RUN_CONNECTLIB_TESTS }}" == "true" ]; then echo "--run-connectlib-tests"; fi) \
            --write-summary-to-file ./.slack_message
          end=`date +%s`
          echo "E2E_TESTS_DURATION_SECONDS=$((end-start))" >> $GITHUB_ENV
        env:
          GIT_TOKEN: ${{ secrets.OWLFRED_PAT }}
      - if: always() && github.event_name == 'schedule'
        name: Send Slack report
        run: |
          ci/send-slack-report.py '${{ secrets.SLACK_WEBHOOK }}' ci/.slack_message \
          --title 'Distributed e2e tests' \
          --status '${{ job.status }}' \
          --link 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}' \
          --duration-seconds "${E2E_TESTS_DURATION_SECONDS}"
      - name: Upload pod logs
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: logs-and-screenshots-distributed
          path: ci/logs
          retention-days: 5
  test-standalone:
    # Prevent the test from running on forks
    if: >-
      github.repository == 'owkin/connect-tests' &&
      (
        !github.event.inputs.orchestratorMode ||
        github.event.inputs.orchestratorMode == 'both' ||
        github.event.inputs.orchestratorMode == 'standalone'
      )
    name: Tests Standalone
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        name: Set up python
        with:
          python-version: 3.7
      - name: Install python requirements
        run: pip install -r ci/requirements.txt
      - uses: azure/setup-helm@v1
        with:
          version: "v3.2.3"
      - uses: azure/setup-kubectl@v1
        with:
          version: "latest"
      - name: Install Skaffold
        run: |
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/v1.33.0/skaffold-linux-amd64
          chmod +x ./skaffold
          sudo mv ./skaffold /usr/local/bin/skaffold
          skaffold version
      - name: Install tools
        run: pip install pyyaml
      - name: Open GCP key
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: gpg --quiet --batch --yes --decrypt --passphrase="$GPG_PASSPHRASE" --output ci/keys/gcp_sa_key.json "${GCP_SERVICE_ACCOUNT_KEY}"
      - name: Set variables
        run: |
          echo "${{ github.event.inputs.testsToRun }}"
          echo "RUN_END_TO_END_TESTS=${{  github.event_name == 'workflow_dispatch' && (github.event.inputs.testsToRun == 'all' || github.event.inputs.testsToRun == 'sdk' || github.event.inputs.testsToRun == 'sdkFrontend' || github.event.inputs.testsToRun == 'sdkConnectlib') || github.event_name != 'workflow_dispatch' && env.DEFAULT_RUN_END_TO_END_TESTS }}" >> $GITHUB_ENV
          echo "RUN_FRONTEND_TESTS=${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.testsToRun == 'all' || github.event.inputs.testsToRun == 'sdkFrontend') || github.event_name != 'workflow_dispatch' && env.DEFAULT_RUN_FRONTEND_TESTS_STANDALONE }}" >> $GITHUB_ENV
          echo "RUN_CONNECTLIB_TESTS=${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.testsToRun == 'all' || github.event.inputs.testsToRun == 'sdkConnectlib' || github.event.inputs.testsToRun == 'connectlib') || github.event_name != 'workflow_dispatch' && env.DEFAULT_RUN_CONNECTLIB_TESTS_STANDALONE }}" >> $GITHUB_ENV
      - name: Workflow inputs
        run: |
          echo '${{ github.event.inputs.refs }}'
      - name: Test
        run: |
          CLUSTER_NAME="connect-tests-$(date -u +'%Y-%m-%d-%Hh%M')"
          cd ci/
          start=`date +%s`
          python -u ./run-ci.py \
            --gcp-keys-directory=./keys/ --gcp-key-filename=gcp_sa_key.json \
            --cluster-name=${CLUSTER_NAME} \
            --git-use-token --git-clone-method=https \
            --refs '${{ github.event.inputs.refs }}'
            --orchestrator-mode standalone \
            $(if [ "${{ env.RUN_END_TO_END_TESTS }}" != "true" ]; then echo --tests-make-command=""; fi) \
            $(if [ "${{ env.RUN_FRONTEND_TESTS }}" == "true" ]; then echo "--run-frontend-tests"; fi) \
            $(if [ "${{ env.RUN_CONNECTLIB_TESTS }}" == "true" ]; then echo "--run-connectlib-tests"; fi) \
            --write-summary-to-file ./.slack_message
          end=`date +%s`
          echo "E2E_TESTS_DURATION_SECONDS=$((end-start))" >> $GITHUB_ENV
        env:
          GIT_TOKEN: ${{ secrets.OWLFRED_PAT }}
      - if: always() && github.event_name == 'schedule'
        name: Send Slack report
        run: |
          ci/send-slack-report.py '${{ secrets.SLACK_WEBHOOK }}' ci/.slack_message \
          --title 'Standalone e2e tests' \
          --status '${{ job.status }}' \
          --link 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}' \
          --duration-seconds "${E2E_TESTS_DURATION_SECONDS}"
      - name: Upload pod logs
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: logs-and-screenshots-standalone
          path: ci/logs
          retention-days: 5
  connect-bot-context:
    # This allows the Connect GitHub Bot to retrieve the context in which the workflow was triggered
    if: github.event.inputs.githubBotContext != ''
    name: Output bot context
    runs-on: ubuntu-latest
    steps:
    - run: |
        # The bot will parse the comment line below
        # bot context is: ${{ github.event.inputs.githubBotContext }}
